#!/bin/sh
#
# cltest
#
# Copyright (c) 2015-2017, Oleksiy Chernyavskyy
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

################################################################################
# JUMP TO MODERN SHELL IF POSSIBLE
(test_exit_code_127_sdfjsdfksjdhfksjdhf  >/dev/null) 2>/dev/null
if test $? -ne 127; then
  if test -z "$CLTEST_BASH_REDIRECT"; then
    CLTEST_BASH_REDIRECTED=1
    export CLTEST_BASH_REDIRECTED
    if test -x /bin/bash; then
      exec /bin/bash "$0" ${1+"$@"}
    elif test -x /usr/bin/bash; then
      exec /usr/bin/bash "$0" ${1+"$@"}
    elif test -x /usr/local/bin/bash; then
      exec /usr/local/bin/bash "$0" ${1+"$@"}
    elif test -x /usr/pkg/bin/bash; then
      exec /usr/pkg/bin/bash "$0" ${1+"$@"}
    else
      (bash -c "pwd" >/dev/null) 2>/dev/null
      if test $? -eq 0; then
        exec bash "$0" ${1+"$@"}
      fi
    fi
  fi
fi
CLTEST_BASH_REDIRECTED=
export CLTEST_BASH_REDIRECTED
################################################################################


abs_path() {
  _sub_orig_dir=`pwd`
  if test $# = 0; then
    abs_path_ret=
    return
  fi
  if test $# = 2; then
    _arg_orig_dir=$1
    _arg=$2
    if echo "$_arg" | grep "^/" > /dev/null; then
      :
    else
      _arg=`echo "$_arg_orig_dir/$_arg" | sed 's!//*!/!g'`
    fi
  else
    _arg=$1
  fi
  if test -e "$_arg"; then
    if test -d $_arg; then
      _file=
    else
      _file=`basename "$_arg"`
      _arg=`dirname "$_arg"`
    fi

    cd $_cd_param $_arg
    abs_path_ret=`pwd`
    if test x"$_file" != "x"; then
      abs_path_ret="$abs_path_ret/$_file"
    fi

    cd $_cd_param $_sub_orig_dir
  else
    if echo "$_arg" | grep "^/" > /dev/null; then
      abs_path_ret="$_arg"
    else
      abs_path_ret="$_sub_orig_dir/$_arg"
    fi
    abs_path_ret=`echo "$abs_path_ret" | sed 's#//*#/#g'`
    abs_path_ret=`echo "$abs_path_ret" | sed 's#/*$#/#'`
    string_prev=
    while test "x$abs_path_ret" != "x$string_prev" ; do
      string_prev=$abs_path_ret
      abs_path_ret=`echo "$abs_path_ret" | sed 's#/[^/][^/][^/][^/]*/\.\./#/#g' | sed 's#/[^/][^/.]/\.\./#/#g' | sed 's#/[^/.][^/]/\.\./#/#g' | sed 's#/[^/.]/\.\./#/#g'`
      abs_path_ret=`echo "$abs_path_ret" | sed 's#^/\.\./#/#' | sed 's#^/\.\.$#/#'`
      abs_path_ret=`echo "$abs_path_ret" | sed 's#/\./#/#g' | sed 's#/\.$#/#'`
    done
    abs_path_ret=`echo "$abs_path_ret" | sed 's#/$##' | sed 's#^$#/#'`
  fi
}

script_name=`basename "$0"`
orig_dir=`pwd`
abs_path $0
script_abs=$abs_path_ret
script_dir=`dirname "$script_abs"`
lang_mode=c
test_dir=/tmp/cltest_$$
tmp_buf="$test_dir/cltest_buf.txt"
version_string="0.8"
cltest_log=$test_dir/cltest.log
c_ext="c"
CC=
CFLAGS=
LD=
LDFLAGS=

print_help() {
cat <<EOF
C/C++ system test tool

usage: $script_name [options]

options:
 -c++                  enable C++ mode
 -n                    no echo
 -f                    echo only on fail
 -disable-ld           disable any linking tests
 -out=<file>           for every subtest generate status variable and write it to a FILE
 -def-out=<file>       for every subtest generate status define and write it to a FILE
 -status=<var>         generate status variable/define VAR=1 if test passed ok
 -no-break             do not break when some test are not passed
 -log[=<file>]         print log to a standard output or to a specified file
 -cc[=<cmd>]           test compiler
 -cflags=<flags>       test compiler flags
 -ld[=<cmd>]           test linker
 -ldflags=<flags>      test linker flags
 -lib ..               test system libraries
 -inc ..               test library headers
 -def ..               test library defines
 -type ..              test library types
 -enum ..              test library enum constants
 -var ..               test library extern variables
 -func ..              test library functions
 -sym ..               test library symbols
 -rval ..              test library rvalues (define, enum, variable)
 -cstr <text>          test one line source string
 -l*                   test system libraries
 "#if* ..."            test preprocessor conditional directives
 *.h|*.H|*.hpp         test header files. Other file extensions are recognized
 *.c|*.C|*.cpp         test source files. Other file extensions are recognized
 *.so|*.so.*           test dynamic libraries
 *.a                   test static libraries
 CMD=<cmd>             specify compiler command
 FLAGS=<flags>         specify compiler flags
 LD=<cmd>              specify linker command
 LDFLAGS=<flags>       specify linker flags
 INC=<files>           include header files
 -v|-version           print version
 standard compiler and linker flags are accepted: -I -D -l -L
EOF
}

print_version() {
  echo "cltest $version_string"
}

probe_cc() {
  cprobe_flags=
  if test $lang_mode = "c++"; then
    xprobe="cprobe -c++"
    CX_LANG="C++"
    cprobe_flags="-c++"
  else
    xprobe=cprobe
    CX_LANG="C"
  fi
  
  ($xprobe -h >/dev/null) 2>/dev/null
  if test $? -eq 0; then
    CPROBE=$xprobe
  elif test -f $script_dir/$xprobe; then
      CPROBE=$script_dir/$xprobe
  else
    echo "$script_name: error: cprobe not found" >&2
    clean_exit 1
  fi

  test -n "$CC" && cprobe_flags="$cprobe_flags CMD=\"$CC\""
  test -n "$CFLAGS" && cprobe_flags="$cprobe_flags FLAGS=\"$CFLAGS\""

  CC_CMD=
  cprobe_out="/tmp/cprobe_out_$$.sh"
  eval $CPROBE $cprobe_flags -f1 >$cprobe_out 2>/dev/null
  if test -f $cprobe_out; then
    . $cprobe_out
    rm -f $cprobe_out
  fi

  CPP_FLAG=-E
  c_flag="-c"
  o_obj_flag="-o"
  o_exe_flag="-o"
  exe_ext=
  obj_ext="o"

  case "$CC_ID" in
    ticc)
      CPP_FLAG=-ppl
      ;;
    msc)
      CPP_FLAG="/E"
      c_flag="/c"
      o_obj_flag="/Fo:"
      o_exe_flag="/Fe:"
      ;;
  esac

  if test x$CC_OS = xwindows; then
    exe_ext=".exe"
    obj_ext="obj"
  fi
}

echo_status() {
  if test "$1" = "-l"; then
    p1=$2
    p2=$3
    printf "\n# $p1\n" "$p2" >> $cltest_log
  else
    p1=$1
    p2=$2
  fi
  if test x$op_no_echo = x; then
    printf "$p1" "$p2"
  elif test x$op_echo_fail = x1; then
    printf "$p1" "$p2" >> $tmp_buf
  fi
}

clean_exit() {
  exit_status=$1

  if test $exit_status != 0 && test x$op_echo_fail = x1 && test -f $tmp_buf; then
    cat $tmp_buf
  fi

  if test -f $cltest_log; then
    if test x$op_echo_log = x1; then
      printf "\n%s\n%s\n" "LOG" "----------------------------------------" >&2
      cat $cltest_log >&2
    fi
    if test -n "$op_log_file"; then
      cat $cltest_log >> $op_log_file
    fi
  fi
  cd $orig_dir
  if test -d $test_dir; then
    rm -rf $test_dir
  fi
  exit $exit_status
}


log_title() {
  cat <<EOF >>$cltest_log

################################################################################
# $1
EOF
}

log_src() {
  if test -n "$1" && test -f "$1"; then
    echo "****************************************">>$cltest_log
    cat $1 | sed 's/^/* /g' >>$cltest_log
    echo "****************************************">>$cltest_log
  fi
}

setup_test_dir() {
  rm -f $test_dir/*
  cd $test_dir
  
  test_src_base=test_src_base.$c_ext
  
  echo "" >$test_src_base
  for inc in $op_with_inc; do
    inc=`echo "$inc" | sed 's/[<]//' | sed 's/[>]//'`
    echo "#include <$inc>" >> $test_src_base
  done
}

op_disable_ld=1
current_opt=
def_num=0
type_num=0
while test $# -gt 0; do
  param=$1
  case "$param" in
    -h|-help|--help)
      print_help
      exit 0
      ;;
    -v|-version)
      print_version
      exit 0
      ;;
    -c++)
      lang_mode=c++
      c_ext="cpp"
      current_opt=
      ;;
    CMD=*)
      CC=`echo "$param" | sed 's/^[^=]*=//' | sed 's/^ *//' | sed 's/ *$//'`
      current_opt=
      ;;
    FLAGS=*)
      CFLAGS=`echo "$param" | sed 's/^[^=]*=//' | sed 's/^ *//' | sed 's/ *$//'`
      current_opt=
      ;;
    LD=*)
      LD=`echo "$param" | sed 's/^[^=]*=//' | sed 's/^ *//' | sed 's/ *$//'`
      current_opt=
      ;;
    LDFLAGS=*)
      LDFLAGS=`echo "$param" | sed 's/^[^=]*=//' | sed 's/^ *//' | sed 's/ *$//'`
      current_opt=
      ;;
    INC=*)
      _op_with_inc=`echo "$param" | sed 's/^[^=]*=//'`
      op_with_inc="$op_with_inc $_op_with_inc"
      current_opt=
      ;;
    -cc)
      op_test_cc=1
      current_opt=
      ;;
    -cc=*)
      op_test_cc=1
      CC=`echo "$param" | sed 's/^[^=]*=//' | sed 's/^ *//' | sed 's/ *$//'`
      current_opt=
      ;;
    -cflags=*)
      op_test_flags=`echo "$param" | sed 's/^[^=]*=//' | sed 's/^ *//' | sed 's/ *$//'`
      current_opt=
      ;;
    -n)
      op_no_echo=1
      op_echo_fail=
      current_opt=
      ;;
    -f)
      op_echo_fail=1
      op_no_echo=1
      current_opt=
      ;;
    -disable-ld)
      op_disable_ld=1
      op_test_ld=
      current_opt=
      ;;
    -out=*)
      op_out=`echo "$param" | sed 's/^[^=]*=//'`
      current_opt=
      ;;
    -def-out=*)
      op_def_out=`echo "$param" | sed 's/^[^=]*=//'`
      current_opt=
      ;;
    -status=*)
      op_status_id=`echo "$param" | sed 's/^[^=]*=//' | sed 's/[^a-zA-Z0-9_]//g'`
      current_opt=
      ;;
    -no-break)
      op_no_break=1
      current_opt=
      ;;
    -ld)
      op_test_ld=1
      op_disable_ld=
      current_opt=
      ;;
    -ld=*)
      op_test_ld=1
      LD=`echo "$param" | sed 's/^[^=]*=//'`
      op_disable_ld=
      current_opt=
      ;;
    -ldflags=*)
      op_test_ldflags=`echo "$param" | sed 's/^[^=]*=//'`
      op_disable_ld=
      current_opt=
      ;;
    -lib)
      current_opt=lib
      ;;
    -inc)
      current_opt=inc
      ;;
    -def)
      current_opt=def
      ;;
    -type)
      current_opt='type'
      ;;
    -enum)
      current_opt=enum
      ;;
    -var)
      current_opt=var
      ;;
    -func)
      current_opt=func
      ;;
    -sym)
      current_opt=sym
      ;;
    -rval)
      current_opt=rval
      ;;
    -cstr)
      current_opt=cstr
      ;;
    -log)
      op_echo_log=1
      current_opt=
      ;;
    -log=*)
      op_log_file=`echo "$param" | sed 's/^[^=]*=//'`
      current_opt=
      ;;
    -l*)
      op_libs="$op_libs $param"
      op_disable_ld=
      current_opt=
      ;;
    -[ID]*)
      op_flags_add="$op_flags_add $param"
      current_opt=
      ;;
    -L*)
      op_ldflags_add="$op_ldflags_add $param"
      current_opt=
      ;;
    \#if*)
      eval def$def_num=\$param
      def_num=`expr $def_num + 1`
      if test x$current_opt != xdef; then
        current_opt=
      fi
      ;;
    *.h)
      op_inc="$op_inc $param"
      current_opt=
      ;;
    *.c)
      op_src="$op_src $param"
      current_opt=
      ;;
    *.H|*.[Hh]++|*.[Hh][Hh]|*.[Hh][Xx][Xx]|*.[Hh][Pp][Pp])
      op_inc="$op_inc $param"
      lang_mode=c++
      current_opt=
      ;;
    *.C|*.[Cc][Cc]|*.[Cc][Pp][Pp]|*.[Cc][Xx][Xx]|*.[Cc]++)
      op_src="$op_src $param"
      lang_mode=c++
      current_opt=
      ;;
    *.so|*.so.*)
      op_libs="$op_libs $param"
      op_disable_ld=
      if test x$current_opt != xlib; then
        current_opt=
      fi
      ;;
    *.a)
      op_libs="$op_libs $param"
      op_disable_ld=
      if test x$current_opt != xlib; then
        current_opt=
      fi
      ;;
    *)
      if test -z "$current_opt"; then
        printf "%s\n" "$script_name: invalid parameter $param" >&2
        exit 1
      fi
      param=`echo "$1" | sed 's/^ *//' | sed 's/^# */#/'`
      case "$current_opt" in
        lib)
          param=`echo "$param" | sed 's/^lib//'`
          if test -n "$param"; then
            op_libs="$op_libs -l$param"
            op_disable_ld=
          fi
          ;;
        inc)
          op_inc="$op_inc $param"
          ;;
        def)
          eval def$def_num=\$param
          def_num=`expr $def_num + 1`
          ;;
        type)
          eval type$type_num=\$param
          type_num=`expr $type_num + 1`
          ;;
        enum)
          op_enum="$op_enum $param"
          ;;
        var)
          op_var="$op_var $param"
          op_disable_ld=
          ;;
        func)
          op_func="$op_func $param"
          op_disable_ld=
          ;;
        sym)
          op_sym="$op_sym $param"
          op_disable_ld=
          ;;
        rval)
          op_rval="$op_rval $param"
          op_disable_ld=
          ;;
        cstr)
          op_cstr=$1
          op_disable_ld=
          current_opt=
          ;;
      esac
      ;;
  esac
  shift
done

rm -rf $test_dir 2>/dev/null
(mkdir $test_dir >/dev/null) 2>/dev/null
if test ! -d $test_dir; then
  echo "$script_name: error: could not create temporary directory $test_dir" >&2
  exit 1
fi

CFLAGS=`echo "$op_flags_add $CFLAGS" | sed 's/^ *//' | sed 's/ *$//'`
LDFLAGS=`echo "$op_ldflags_add $LDFLAGS" | sed 's/^ *//' | sed 's/ *$//'`

op_test_flags=`echo "$op_test_flags" | sed 's/^ *//' | sed 's/ *$//'`
op_test_ldflags=`echo "$op_test_ldflags" | sed 's/^ *//' | sed 's/ *$//'`

op_with_inc=`echo "$op_with_inc" | sed 's/^ *//' | sed 's/ *$//'`

if test -n "$op_log_file"; then
  if echo "$op_log_file" | grep "^/" > /dev/null; then : ; else
    op_log_file="$orig_dir/$op_log_file"
  fi
fi
if test -n "$op_out"; then
  if echo "$op_out" | grep "^/" > /dev/null; then : ; else
    op_out="$orig_dir/$op_out"
  fi
fi
if test -n "$op_def_out"; then
  if echo "$op_def_out" | grep "^/" > /dev/null; then : ; else
    op_def_out="$orig_dir/$op_def_out"
  fi
fi

################################################################################
# TEST COMPILER
log_title "TEST COMPILER"

probe_cc
cc_c="$CC_CMD $c_flag"
cc_cf="$cc_c $CFLAGS $op_test_flags"

cd $test_dir

if test -z "$CC_CMD"; then
  if test -z "$CC"; then
    echo_status -l "%s\n" "compiler not found"
  else
    echo_status -l "%s\n" "checking compiler $CC ... Failed"
  fi
  clean_exit 1
elif test x$op_test_cc = x1; then
  echo_status -l "%s\n" "checking compiler $CC ... OK"
fi

################################################################################
# SET UP TEST DIR
setup_test_dir
test_src=test_src.$c_ext
test_obj=test.$obj_ext
test_exe=app$exe_ext
  
################################################################################
# SET UP LINKER
if test -n "$LD"; then
  LD_CMD=$LD
else
  LD_CMD=$CC_CMD
fi
linker_flags="$LDFLAGS $op_test_ldflags"
  
################################################################################
# TEST CFLAGS
if test -n "$CFLAGS"; then
  log_title "TEST ADDITIONAL COMPILER FLAGS (CFLAGS)"

  cat <<EOF >$test_src
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  log_src $test_src
  echo "$cc_c $CFLAGS $test_src" >> $cltest_log
  $cc_c $CFLAGS $test_src>> $cltest_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "checking compiler flags '$CFLAGS'... Failed"
    clean_exit $ret
  fi
  rm -f $test_src
  rm -f test.o*
fi

################################################################################
# TEST COMPILER FLAGS
if test -n "$op_test_flags"; then
  log_title "TEST COMPILER FLAGS"
  echo_status -l "%s" "checking compiler flags $op_test_flags ... "

  cat <<EOF >$test_src
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  log_src $test_src
  echo "$cc_cf $test_src" >> $cltest_log
  $cc_cf $test_src>> $cltest_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "Failed"
    flags=
    for flag in $op_test_flags; do
     echo_status "%s" "  $flag ... "
     flags="$flags $flag"
     echo "$cc_c $CFLAGS $flags $test_src" >> $cltest_log
     $cc_c $CFLAGS $flags $test_src>> $cltest_log 2>&1
     _ret=$?
     if test $_ret -ne 0; then
       echo_status "%s\n" "Failed"
       clean_exit $_ret
     else
       echo_status "%s\n" "OK"
     fi
    done
    clean_exit $ret
  else
    echo_status "%s\n" "OK"
  fi
  rm -f $test_src
  rm -f test.o*
fi
 
################################################################################
# TEST op_with_inc
if test -n "$op_with_inc"; then
  log_title "TEST ADDITIONAL HEADERS (op_with_inc)"

  cat $test_src_base > $test_src
  echo "int cltest_test = 1;" >> $test_src

  log_src $test_src
  echo "$cc_cf $test_src" >> $cltest_log
  $cc_cf $test_src >> $cltest_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "checking headers '$op_with_inc'... Failed"
    if test x$op_no_break = x; then
      clean_exit $ret
    fi
    exit_status=1
  fi
  rm -f test.o*
fi

################################################################################
# TEST HEADERS
if test -n "$op_inc"; then
  log_title "TEST HEADERS"
  for inc in $op_inc; do
    cat $test_src_base > $test_src
    inc=`echo "$inc" | sed 's/[<]//' | sed 's/[>]//'`
    echo "#include <$inc>" >> $test_src
    echo_status -l "%s" "checking header $inc ... "
    log_src $test_src
    echo "$cc_cf $test_src" >> $cltest_log
    $cc_cf $test_src >> $cltest_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
      exit_status=1
    else
      echo_status "%s\n" "OK"
      if test -n "$op_out$op_def_out"; then
        out_var=`echo "SC_HAVE_INC_$inc" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
        if test -n "$op_out"; then
          echo "$out_var=1" >>$op_out
        fi
        if test -n "$op_def_out"; then
          echo "#define $out_var 1" >>$op_def_out
        fi
      fi
      echo "#include <$inc>" >> $test_src_base
    fi
    rm -f test.o*
  done
fi
  
################################################################################
# TEST CPP DEFINES
if test $def_num -gt 0; then
  log_title "TEST CPP DEFINES"
fi
def_idx=0
while test $def_idx -lt $def_num; do
  cat $test_src_base > $test_src

  if_directive=0
  eval def_string=\$def$def_idx
  def_string=`echo "$def_string" | sed 's/^ *//'`
  echo_status -l "%s" "checking define $def_string ... "
  case "$def_string" in
    '#if'*)
      if_directive=1
      ;;
  esac

  if test $if_directive = 1; then
    cat >>$test_src <<EOF
$def_string
#else
#error cltest: false directive: $def_string
#endif

EOF
  else
    def_name=`echo "$def_string" | sed 's/[^a-zA-Z0-9_].*//'`
    case "$def_name" in
      [0-9]*)
        echo "$script_name: error invalid macro $def_name" >&2
        clean_exit 1
        ;;
    esac
    rpart=`echo "$def_string" | sed 's/[a-zA-Z0-9_]*//' | sed 's/^ *//'`
    if test "x$rpart" = x; then
      cat >>$test_src <<EOF
#ifndef $def_name
#error cltest: $def_name not defined
#endif

EOF
    else
      opstr=`echo "$rpart" | sed 's/^\([=><!]*\).*/\1/'`
      rval=`echo "$rpart" | sed 's/^[=><!]*//'`
      case x$opstr in
        'x=='|'x!='|'x>'|'x<'|'x>='|'x<=')
          :
          ;;
        'x=')
          opstr="=="
          ;;
        *)
          echo "$script_name: error invalid argument $def_string" >&2
          clean_exit 1
          ;;
      esac
      cat >>$test_src <<EOF
#if $def_name $opstr $rval
#else
#error cltest: false expression: $def_name $opstr $rval
#endif

EOF
    fi
  fi
  log_src $test_src
  echo "$cc_cf $test_src" >> $cltest_log
  $cc_cf $test_src >> $cltest_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "Failed"
    if test x$op_no_break = x; then
      clean_exit $ret
    fi
    exit_status=1
  else
    echo_status "%s\n" "OK"
  fi
  rm -f test.o*
  def_idx=`expr $def_idx + 1`
done
  
################################################################################
# TEST TYPES
if test $type_num -gt 0; then
  log_title "TEST TYPES"
  type_idx=0
  while test $type_idx -lt $type_num; do
    cat $test_src_base > $test_src

    eval type_string=\$type$type_idx
    type_string=`echo "$type_string" | sed 's/^ *//'`

    type_base=`echo "$type_string" | sed 's/\**$//'`
    echo "$type_base *cltest_var;" >> $test_src
  
    echo_status -l "%s" "checking type $type_string ... "
    log_src $test_src
    echo "$cc_cf $test_src" >> $cltest_log
    $cc_cf $test_src >> $cltest_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
      exit_status=1
    else
      echo_status "%s\n" "OK"
      if test -n "$op_out$op_def_out"; then
        out_var=`echo "SC_HAVE_TYPE_$type_string" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
        if test -n "$op_out"; then
          echo "$out_var=1" >>$op_out
        fi
        if test -n "$op_def_out"; then
          echo "#define $out_var 1" >>$op_def_out
        fi
      fi
    fi
    rm -f test.o*
    type_idx=`expr $type_idx + 1`
  done
fi
  
################################################################################
# TEST ENUMS
if test -n "$op_enum"; then
  log_title "TEST ENUMS"
  for enum in $op_enum; do
    cat $test_src_base > $test_src

    echo "int cltest_enum = $enum;" >> $test_src
  
    echo_status -l "%s" "checking enum $enum ... "
    log_src $test_src
    echo "$cc_cf $test_src" >> $cltest_log
    $cc_cf $test_src >> $cltest_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
      exit_status=1
    else
      echo_status "%s\n" "OK"
      if test -n "$op_out$op_def_out"; then
        out_var=`echo "SC_HAVE_ENUM_$enum" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
        if test -n "$op_out"; then
          echo "$out_var=1" >>$op_out
        fi
        if test -n "$op_def_out"; then
          echo "#define $out_var 1" >>$op_def_out
        fi
      fi
    fi
    rm -f test.o*
  done
fi
  
################################################################################
# TEST LD
if test x$op_disable_ld = x; then
  log_title "TEST LD"
  if test x$op_test_ld = x1; then
    echo_status -l "%s" "checking linker $LD_CMD ... "
  fi

  cat <<EOF >$test_src
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  log_src $test_src
  echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
  $cc_cf $o_obj_flag $test_obj $test_src >> $cltest_log 2>&1
  
  echo "$LD_CMD $o_exe_flag $test_exe $test_obj" >> $cltest_log
  $LD_CMD $o_exe_flag $test_exe $test_obj>> $cltest_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    if test x$op_test_ld = x1; then
      echo_status "%s\n" "Failed"
    else
      echo_status "%s\n" "checking linker $LD_CMD ... Failed"
    fi
    if test x$op_no_break = x; then
      clean_exit $ret
    fi
    exit_status=1
  else
    if test x$op_test_ld = x1; then
      echo_status "%s\n" "OK"
    fi
  fi
  rm -f app*
  rm -f test.o*
  rm -f $test_src
fi

################################################################################
# TEST LD FLAGS FROM LDFLAGS VARIABLE
if test x$op_disable_ld = x && test -n "$LDFLAGS"; then
  log_title "TEST ADDITIONAL LINKER FLAGS (LDFLAGS)"

  cat <<EOF >$test_src
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  log_src $test_src
  echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
  $cc_cf $o_obj_flag $test_obj $test_src>> $cltest_log 2>&1
  
  echo "$LD_CMD $o_exe_flag $test_exe $test_obj $LDFLAGS" >> $cltest_log
  $LD_CMD $o_exe_flag $test_exe $test_obj $LDFLAGS >> $cltest_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "checking linker flags '$LDFLAGS'... Failed"
    if test x$op_no_break = x; then
      clean_exit $ret
    fi
    exit_status=1
  fi
  rm -f app*
  rm -f test.o*
  rm -f $test_src
fi

################################################################################
# TEST LD FLAGS
if test x$op_disable_ld = x && test -n "$op_test_ldflags"; then
  log_title "TEST LD FLAGS"
  echo_status -l "%s" "checking linker flags $op_test_ldflags ... "

  cat <<EOF >$test_src
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  log_src $test_src
  echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
  $cc_cf $o_obj_flag $test_obj $test_src>> $cltest_log 2>&1

  echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags" >> $cltest_log
  $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags >> $cltest_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "Failed"
    flags=
    for flag in $op_test_ldflags; do
      echo_status "%s" "  $flag ... "
      flags="$flags $flag"
      echo "$LD_CMD $o_exe_flag $test_exe $test_obj $LDFLAGS $flags" >> $cltest_log
      $LD_CMD $o_exe_flag $test_exe $test_obj $LDFLAGS $flags >> $cltest_log 2>&1
      _ret=$?
      if test $_ret -ne 0; then
        echo_status "%s\n" "Failed"
        if test x$op_no_break = x; then
          clean_exit $_ret
        else
          break
        fi
      else
        echo_status "%s\n" "OK"
      fi
    done
    if test x$op_no_break = x; then
      clean_exit $ret
    fi
    exit_status=1
  else
    echo_status "%s\n" "OK"
  fi
  rm -f app*
  rm -f test.o*
fi

################################################################################
# TEST LIBRARIES
if test x$op_disable_ld = x && test -n "$op_libs"; then
  log_title "TEST LIBRARIES"
  echo_status -l "%s" "checking libraries $op_libs ... "

  cat <<EOF >$test_src
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  log_src $test_src
  echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
  $cc_cf $o_obj_flag $test_obj $test_src>> $cltest_log 2>&1

  echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs" >> $cltest_log
  $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs >> $cltest_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "Failed"
    libs=
    for lib in $op_libs; do
      echo_status "%s" "  $lib ... "
      libs="$libs $lib"
      echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $libs" >> $cltest_log
      $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $libs >> $cltest_log 2>&1
      _ret=$?
      if test $_ret -ne 0; then
        echo_status "%s\n" "Failed"
        if test x$op_no_break = x; then
          clean_exit $_ret
        else
          break
        fi
      else
        echo_status "%s\n" "OK"
      fi
    done
    if test x$op_no_break = x; then
      clean_exit $ret
    fi
    exit_status=1
  else
    echo_status "%s\n" "OK"
  fi
  rm -f app*
  rm -f test.o*
fi
  
################################################################################
# TEST CSTR
if test -n "$op_cstr"; then
  test_failed=

  log_title "TEST CSTR"
  cat $test_src_base > $test_src
  echo "$op_cstr" >> $test_src

  echo_status -l "%s" "checking source string $op_cstr ... "
  log_src $test_src
  echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
  $cc_cf $o_obj_flag $test_obj $test_src >> $cltest_log 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo_status "%s\n" "Failed"
    test_failed=1
    if test x$op_no_break = x; then
      clean_exit $ret
    fi
  else
    if test x$op_disable_ld = x; then
      echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs" >> $cltest_log
      $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs >> $cltest_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        rm -f test.o*
        echo "test again ..." >> $cltest_log
        echo "int main(int argc, char *argv[]) { return 0;}" >>$test_src
        log_src $test_src
        echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
        $cc_cf $o_obj_flag $test_obj $test_src >> $cltest_log 2>&1
        ret=$?
        if test $ret -ne 0; then
          echo_status "%s\n" "Failed"
          test_failed=1
          if test x$op_no_break = x; then
            clean_exit $ret
          fi
        else
          echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs" >> $cltest_log
          $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs >> $cltest_log 2>&1
          ret=$?
          if test $ret -ne 0; then
            echo_status "%s\n" "Failed"
            test_failed=1
            if test x$op_no_break = x; then
              clean_exit $ret
            fi
          fi
        fi
      fi
    fi
  fi
  rm -f test.o*
  if test x$test_failed = x; then
    echo_status "%s\n" "OK"
  else
    exit_status=1
  fi
fi
  
################################################################################
# TEST VARIABLES
if test -n "$op_var"; then
  log_title "TEST VARIABLES"
  for var in $op_var; do
    test_failed=
    cat $test_src_base > $test_src

    echo_status -l "%s" "checking variable $var ... "
  
    echo "int main(int argc, char *argv[]) {int cltest_var = (int) $var; return 0;}" >> $test_src
  
    log_src $test_src
    echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
    $cc_cf $o_obj_flag $test_obj $test_src >> $cltest_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      test_failed=1
      if test x$op_no_break = x; then
        echo_status "%s\n" "Failed"
        clean_exit $ret
      fi
    fi
  
    if test x$op_disable_ld = x; then
      echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs" >> $cltest_log
      $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs >> $cltest_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        test_failed=1
        if test x$op_no_break = x; then
          echo_status "%s\n" "Failed"
          clean_exit $ret
        fi
      fi
    fi

    if test x$test_failed = x; then
      echo_status "%s\n" "OK"
      if test -n "$op_out$op_def_out"; then
        out_var=`echo "SC_HAVE_VAR_$var" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
        if test -n "$op_out"; then
          echo "$out_var=1" >>$op_out
        fi
        if test -n "$op_def_out"; then
          echo "#define $out_var 1" >>$op_def_out
        fi
      fi
    else
      echo_status "%s\n" "Failed"
      exit_status=1
    fi
    rm -f test.o*
  done
fi
  
################################################################################
# TEST SYMBOLS
if test -n "$op_sym"; then
  log_title "TEST SYMBOLS"
  for sym in $op_sym; do
    test_failed=

    echo_status -l "%s" "checking symbol $sym ... "
  
    echo "extern void *$sym;" > $test_src
    echo "int main(int argc, char *argv[]) {void *cltest_sym = $sym; return 0;}" >> $test_src
  
    log_src $test_src
    echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
    $cc_cf $o_obj_flag $test_obj $test_src >> $cltest_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      test_failed=1
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
    fi
  
    if test x$op_disable_ld = x; then
      echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs" >> $cltest_log
      $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs >> $cltest_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        test_failed=1
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
      fi
    fi

    if test x$test_failed = x; then
      echo_status "%s\n" "OK"
      if test -n "$op_out$op_def_out"; then
        out_var=`echo "SC_HAVE_SYM_$sym" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
        if test -n "$op_out"; then
          echo "$out_var=1" >>$op_out
        fi
        if test -n "$op_def_out"; then
          echo "#define $out_var 1" >>$op_def_out
        fi
      fi
    else
      exit_status=1
    fi
    rm -f test.o*
  done
fi
  
################################################################################
# TEST RVALS
if test -n "$op_rval"; then
  log_title "TEST RVALS"
  for var in $op_rval; do
    test_failed=
    cat $test_src_base > $test_src

    echo_status -l "%s" "checking rval $var ... "
  
    echo "int main(int argc, char *argv[]) {int cltest_var = (int) $var; return 0;}" >> $test_src
  
    log_src $test_src
    echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
    $cc_cf $o_obj_flag $test_obj $test_src >> $cltest_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      test_failed=1
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
    fi
  
    if test x$op_disable_ld = x; then
      echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs" >> $cltest_log
      $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs >> $cltest_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        test_failed=1
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
      fi
    fi

    if test x$test_failed = x; then
      echo_status "%s\n" "OK"
      if test -n "$op_out$op_def_out"; then
        out_var=`echo "SC_HAVE_RVAL_$var" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
        if test -n "$op_out"; then
          echo "$out_var=1" >>$op_out
        fi
        if test -n "$op_def_out"; then
          echo "#define $out_var 1" >>$op_def_out
        fi
      fi
    else
      exit_status=1
    fi
    rm -f test.o*
  done
fi
  
################################################################################
# TEST FUNCTIONS
if test -n "$op_func"; then
  log_title "TEST FUNCTIONS"
  for func in $op_func; do
    test_failed=
    func=`echo "$func" | sed 's/[(]//' | sed 's/[)]//'`
  
    echo_status -l "%s" "checking function $func ... "
  
    echo "int $func(int);" > $test_src
    echo "int main(int argc, char *argv[]) { int cltest_var = $func(1); return cltest_var; }" >> $test_src
  
    log_src $test_src
    echo "$cc_cf $o_obj_flag $test_obj $test_src" >> $cltest_log
    $cc_cf $o_obj_flag $test_obj $test_src >> $cltest_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      test_failed=1
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
    fi
  
    if test x$op_disable_ld = x; then
      echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs" >> $cltest_log
      $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs >> $cltest_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        test_failed=1
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
      fi
    fi

    if test x$test_failed = x; then
      echo_status "%s\n" "OK"
      if test -n "$op_out$op_def_out"; then
        out_var=`echo "SC_HAVE_FUNC_$func" | sed 's/[^a-zA-Z0-9_]/_/g' | tr '[a-z]' '[A-Z]'`
        if test -n "$op_out"; then
          echo "$out_var=1" >>$op_out
        fi
        if test -n "$op_def_out"; then
          echo "#define $out_var 1" >>$op_def_out
        fi
      fi
    else
      exit_status=1
    fi
    rm -f test.o*
  done
fi
  
################################################################################
# TEST SOURCE FILES
if test -n "$op_src"; then
  log_title "TEST SOURCE FILES"
  for src in $op_src; do
    test_failed=
    if echo "$src" | grep "^/" > /dev/null; then 
      src_full=$src
    else
      src_full="$orig_dir/$src"
    fi
  
    echo_status -l "%s" "checking source file $src ... "
  
    if test ! -f $src_full; then
      echo_status "%s\n" "Failed"
      echo_status "%s\n" "  file $src not found"
      clean_exit 1
    fi
    cp $src_full .
    src_base=`basename "$src_full"`
  
    log_src $src_base
    echo "$cc_cf $o_obj_flag $test_obj $src_base" >> $cltest_log
    $cc_cf $o_obj_flag $test_obj $src_base >> $cltest_log 2>&1
    ret=$?
    if test $ret -ne 0; then
      echo_status "%s\n" "Failed"
      test_failed=1
      if test x$op_no_break = x; then
        clean_exit $ret
      fi
    fi
  
    if test x$op_disable_ld = x; then
      echo "$LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs" >> $cltest_log
      $LD_CMD $o_exe_flag $test_exe $test_obj $linker_flags $op_libs >> $cltest_log 2>&1
      ret=$?
      if test $ret -ne 0; then
        echo_status "%s\n" "Failed"
        test_failed=1
        if test x$op_no_break = x; then
          clean_exit $ret
        fi
      fi
    fi

    if test x$test_failed = x; then
      echo_status "%s\n" "OK"
    else
      exit_status=1
    fi
    rm -f test.o* $src_base
  done
fi

if test -n "$op_status_id" && test -n "$op_out$op_def_out"; then
  if test x$exit_status = x || test x$exit_status = x0; then
    if test -n "$op_out"; then
      echo "$op_status_id=1" >>$op_out
    fi
    if test -n "$op_def_out"; then
      echo "#define $op_status_id 1" >>$op_def_out
    fi
  fi
fi
if test -n "$exit_status"; then
  clean_exit $exit_status
else
  clean_exit 0
fi

