#!/bin/sh
#
# cppdef
#
# Copyright (c) 2015-2017, Oleksiy Chernyavskyy
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

################################################################################
# JUMP TO MODERN SHELL IF POSSIBLE
(test_exit_code_127_sdfjsdfksjdhfksjdhf  >/dev/null) 2>/dev/null
if test $? -ne 127; then
  if test -z "$CPPDEF_BASH_REDIRECT"; then
    CPPDEF_BASH_REDIRECTED=1
    export CPPDEF_BASH_REDIRECTED
    if test -x /bin/bash; then
      exec /bin/bash "$0" ${1+"$@"}
    elif test -x /usr/bin/bash; then
      exec /usr/bin/bash "$0" ${1+"$@"}
    elif test -x /usr/local/bin/bash; then
      exec /usr/local/bin/bash "$0" ${1+"$@"}
    elif test -x /usr/pkg/bin/bash; then
      exec /usr/pkg/bin/bash "$0" ${1+"$@"}
    else
      (bash -c "pwd" >/dev/null) 2>/dev/null
      if test $? -eq 0; then
        exec bash "$0" ${1+"$@"}
      fi
    fi
  fi
fi
CPPDEF_BASH_REDIRECTED=
export CPPDEF_BASH_REDIRECTED
################################################################################


abs_path() {
  _sub_orig_dir=`pwd`
  if test $# = 0; then
    abs_path_ret=
    return
  fi
  if test $# = 2; then
    _arg_orig_dir=$1
    _arg=$2
    if echo "$_arg" | grep "^/" > /dev/null; then
      :
    else
      _arg=`echo "$_arg_orig_dir/$_arg" | sed 's!//*!/!g'`
    fi
  else
    _arg=$1
  fi
  if test -e "$_arg"; then
    if test -d $_arg; then
      _file=
    else
      _file=`basename "$_arg"`
      _arg=`dirname "$_arg"`
    fi

    cd $_cd_param $_arg
    abs_path_ret=`pwd`
    if test x"$_file" != "x"; then
      abs_path_ret="$abs_path_ret/$_file"
    fi

    cd $_cd_param $_sub_orig_dir
  else
    if echo "$_arg" | grep "^/" > /dev/null; then
      abs_path_ret="$_arg"
    else
      abs_path_ret="$_sub_orig_dir/$_arg"
    fi
    abs_path_ret=`echo "$abs_path_ret" | sed 's#//*#/#g'`
    abs_path_ret=`echo "$abs_path_ret" | sed 's#/*$#/#'`
    string_prev=
    while test "x$abs_path_ret" != "x$string_prev" ; do
      string_prev=$abs_path_ret
      abs_path_ret=`echo "$abs_path_ret" | sed 's#/[^/][^/][^/][^/]*/\.\./#/#g' | sed 's#/[^/][^/.]/\.\./#/#g' | sed 's#/[^/.][^/]/\.\./#/#g' | sed 's#/[^/.]/\.\./#/#g'`
      abs_path_ret=`echo "$abs_path_ret" | sed 's#^/\.\./#/#' | sed 's#^/\.\.$#/#'`
      abs_path_ret=`echo "$abs_path_ret" | sed 's#/\./#/#g' | sed 's#/\.$#/#'`
    done
    abs_path_ret=`echo "$abs_path_ret" | sed 's#/$##' | sed 's#^$#/#'`
  fi
}

script_name=`basename "$0"`
orig_dir=`pwd`
abs_path $0
script_abs=$abs_path_ret
script_dir=`dirname "$script_abs"`
lang_mode=c
test_dir=/tmp/cppdef_$$
version_string="0.8"
c_ext="c"
CC=
CFLAGS=

print_help() {
cat <<EOF
read CPP defines

usage: $script_name [options] <defines>...

options:
 -c++                  enable C++ mode
 *.h|*.H|*.hpp         include header files. Other file extensions are recognized
 CMD=<cmd>             specify compiler command
 FLAGS=<flags>         specify compiler flags
 INC=<files>           include header files
 <defines>..           list of preprocessor defines to read
 -v|-version           print version
 standard CPP flags are accepted: -I -D
EOF
}

print_version() {
  echo "cppdef $version_string"
}

probe_cc() {
  cprobe_flags=
  if test $lang_mode = "c++"; then
    xprobe="cprobe -c++"
    CX_LANG="C++"
    cprobe_flags="-c++"
  else
    xprobe=cprobe
    CX_LANG="C"
  fi
  
  ($xprobe -h >/dev/null) 2>/dev/null
  if test $? -eq 0; then
    CPROBE=$xprobe
  elif test -f $script_dir/$xprobe; then
      CPROBE=$script_dir/$xprobe
  else
    echo "$script_name: error: cprobe not found" >&2
    clean_exit 1
  fi

  test -n "$CC" && cprobe_flags="$cprobe_flags CMD=\"$CC\""

  CC_CMD=
  cprobe_out="/tmp/cprobe_out_$$.sh"
  eval $CPROBE $cprobe_flags -f1 >$cprobe_out 2>/dev/null
  if test -f $cprobe_out; then
    . $cprobe_out
    rm -f $cprobe_out
  fi

  CPP_FLAG=-E
  c_flag="-c"
  o_obj_flag="-o"
  o_exe_flag="-o"
  exe_ext=
  obj_ext="o"

  case "$CC_ID" in
    ticc)
      CPP_FLAG=-ppl
      ;;
    msc)
      CPP_FLAG="/E"
      c_flag="/c"
      o_obj_flag="/Fo:"
      o_exe_flag="/Fe:"
      ;;
  esac

  if test x$CC_OS = xwindows; then
    exe_ext=".exe"
    obj_ext="obj"
  fi
}

clean_exit() {
  exit_status=$1

  cd $orig_dir
  if test -d $test_dir; then
    rm -rf $test_dir
  fi
  exit $exit_status
}

setup_test_dir() {
  rm -f $test_dir/*
  cd $test_dir
  
  test_src_base=test_src_base.$c_ext
  
  echo "" >$test_src_base
  for inc in $op_with_inc; do
    inc=`echo "$inc" | sed 's/[<]//' | sed 's/[>]//'`
    echo "#include <$inc>" >> $test_src_base
  done
}

op_def=
while test $# -gt 0; do
  param=$1
  case "$param" in
    -h|-help|--help)
      print_help
      exit 0
      ;;
    -v|-version)
      print_version
      exit 0
      ;;
    -c++)
      lang_mode=c++
      c_ext="cpp"
      ;;
    CMD=*)
      CC=`echo "$param" | sed 's/^[^=]*=//' | sed 's/^ *//' | sed 's/ *$//'`
      ;;
    FLAGS=*)
      CFLAGS=`echo "$param" | sed 's/^[^=]*=//' | sed 's/^ *//' | sed 's/ *$//'`
      ;;
    INC=*)
      _op_with_inc=`echo "$param" | sed 's/^[^=]*=//'`
      op_with_inc="$op_with_inc $_op_with_inc"
      ;;
    -[ID]*)
      op_flags_add="$op_flags_add $param"
      ;;
    *.h)
      op_inc="$op_inc $param"
      ;;
    *.H|*.[Hh]++|*.[Hh][Hh]|*.[Hh][Xx][Xx]|*.[Hh][Pp][Pp])
      op_inc="$op_inc $param"
      lang_mode=c++
      ;;
    *)
      op_def="$op_def $1"
      ;;
  esac
  shift
done

if test -z "$op_def"; then
  exit 0
fi

rm -rf $test_dir 2>/dev/null
(mkdir $test_dir >/dev/null) 2>/dev/null
if test ! -d $test_dir; then
  echo "$script_name: error: could not create temporary directory $test_dir" >&2
  exit 1
fi

CFLAGS=`echo "$op_flags_add $CFLAGS" | sed 's/^ *//' | sed 's/ *$//'`
op_with_inc=`echo "$op_with_inc" | sed 's/^ *//' | sed 's/ *$//'`

################################################################################
# TEST COMPILER
probe_cc
cc_c="$CC_CMD $c_flag"

cd $test_dir

if test -z "$CC_CMD"; then
  if test -z "$CC"; then
    printf "%s\n" "compiler not found" >&2
  else
    printf "%s\n" "checking compiler $CC ... Failed" >&2
  fi
  clean_exit 1
fi

################################################################################
# SET UP TEST DIR
setup_test_dir
test_src=test_src.$c_ext
test_pp=test_src.pp
test_obj=test.$obj_ext

################################################################################
# TEST CFLAGS
if test -n "$CFLAGS"; then
  cat <<EOF >$test_src
int main(int argc, char *argv[]) {
  return 0;
}
EOF
  $cc_c $CFLAGS $o_obj_flag $test_obj $test_src 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo "%s" "checking compiler flags '$CFLAGS'... Failed" >&2
    clean_exit $ret
  fi
  rm -f $test_src
  rm -f test.o*
fi

################################################################################
# TEST op_with_inc
if test -n "$op_with_inc"; then
  cat $test_src_base > $test_src
  echo "int cppdef_test = 1;" >> $test_src

  $cc_c $CFLAGS $o_obj_flag $test_obj $test_src 2>&1
  ret=$?
  if test $ret -ne 0; then
    echo "%s" "checking headers '$op_with_inc'... Failed" >&2
    clean_exit $ret
  fi
  rm -f test.o*
fi

################################################################################
# READ DEFINES
defvals=
for def in $op_def; do
  cat $test_src_base > $test_src

  cat <<EOF >>$test_src
#ifdef $def
CPPDEF_DEFVAL=$def
#endif
EOF
  if test "$CC_ID" = ticc; then
    $CC_CMD $CFLAGS $CPP_FLAG $test_src 2>/dev/null
    cat $test_pp > test_c.out
    rm -f $test_pp
  else
    $CC_CMD $CFLAGS $CPP_FLAG $test_src 2>/dev/null > test_c.out
  fi

  defval=`cat test_c.out | grep "^ *CPPDEF_DEFVAL" | sed 's/^ *CPPDEF_DEFVAL=//' | sed 's/ *$//' | sed 's/"$//' |  sed 's/^"//' | tr -d '\n'`
  if test -n "$defval"; then
    if test -n "$defvals"; then
      defvals="$defvals $defval"
    else
      defvals=$defval
    fi
  fi
done

echo "$defvals" | sed 's/^ *//'
rm -f $test_src
clean_exit 0

