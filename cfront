#!/bin/sh
#
# cfront
#
# Copyright (c) 2015-2017, Oleksiy Chernyavskyy
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

################################################################################
# JUMP TO MODERN SHELL IF POSSIBLE
(test_exit_code_127_sdfjsdfksjdhfksjdhf  >/dev/null) 2>/dev/null
if test $? -ne 127; then
  if test -z "$CFRONT_BASH_REDIRECT"; then
    CFRONT_BASH_REDIRECTED=1
    export CFRONT_BASH_REDIRECTED
    if test -x /bin/bash; then
      exec /bin/bash "$0" ${1+"$@"}
    elif test -x /usr/bin/bash; then
      exec /usr/bin/bash "$0" ${1+"$@"}
    elif test -x /usr/local/bin/bash; then
      exec /usr/local/bin/bash "$0" ${1+"$@"}
    elif test -x /usr/pkg/bin/bash; then
      exec /usr/pkg/bin/bash "$0" ${1+"$@"}
    else
      (bash -c "pwd" >/dev/null) 2>/dev/null
      if test $? -eq 0; then
        exec bash "$0" ${1+"$@"}
      fi
    fi
  fi
fi
CFRONT_BASH_REDIRECTED=
export CFRONT_BASH_REDIRECTED
################################################################################


version_string="cfront 1.0"
script_name=`basename "$0"`
lang_mode=c
orig_dir=`pwd`

print_help() {
  cat <<EOF
C/C++ compiler frontend

Usage: $script_name [[type=]cmd] <options>

Options:
 [type=]cmd            optional 1st parameter specifies optional compiler type and command
 -c                    compile only sources
 -o <file>             output file
 -pic                  generate position-independent code (PIC)
 -I* -D* -U*           compiler flags
 -L*                   linker flags
 -l*|lib*|*.so|*.dll   dynamic libraries
 *.a                   static libraries
 *.c|*.C|*.cpp         source files. Other file extensions are recognized
 *.o|*.obj             object files
 -lib[=<name>]         create dynamic library. Specify optional name
 -ver=<string>         library version
 -d=<dir>              output directory
 -print                print only commands, but do not execute
 -mk                   print Make rules
 -mkdep                print Make dependency rules
 -v                    print version
 -htypes               print a list of supported compiler types
 ...                   unrecognized parameters are forwarded as compiler and linker flags
EOF
}

print_help_types() {
cat <<EOF
cc          Generic POSIX compiler
armc        ARM Compiler (by ARM)
clang       Clang
compcert    CompCert C
gcc         GCC
hpacc       HP aC++
hpansic     HP ANSI C
intel       Intel C/C++
mingw       MinGW
mipspro     SGI MIPSPro
msc         Microsoft Visual C/C++
pgi         Portland Group C/C++
sdcc        SDCC (Small Device C Compiler)
sunpro      Solaris Studio (Sun Studio, SunPro)
ticc        Texas Instruments C/C++ Compiler
tinyc       Tiny C Compiler (TCC, TinyCC)
watcom      Watcom C/C++ (Open Watcom C/C++)
xlc         IBM XL C/C++
EOF
}

print_version() {
  echo "$version_string"
}

probe_cc() {
  check_cc_found=
  ($op_cmd >/dev/null) 2>/dev/null
  if test $? -ge 126; then
    return
  fi
  check_cc_found=1

  probe_out=/tmp/cc_probe_$$.txt
  rm -f $probe_out
  cc_cmd0=`echo "$op_cmd" | sed 's# [^/]*$##'`
  ($cc_cmd0 -version >>$probe_out) 2>>$probe_out
  ($cc_cmd0 --version >>$probe_out) 2>>$probe_out
  ($cc_cmd0 -V >>$probe_out) 2>>$probe_out
  ($cc_cmd0 -qversion >>$probe_out) 2>>$probe_out
  ($cc_cmd0 -h >>$probe_out) 2>>$probe_out
  ($cc_cmd0 --help >>$probe_out) 2>>$probe_out
  ($cc_cmd0 >>$probe_out) 2>>$probe_out

  if grep "Texas Instruments" $probe_out | grep "Tools Copyright" >/dev/null; then
    op_cctype=ticc
  elif grep -i mingw $probe_out >/dev/null; then
    op_cctype=mingw
  elif grep -i gcc $probe_out >/dev/null && grep -i "free software foundation" $probe_out >/dev/null; then
    op_cctype=gcc
  elif grep -i "clang version" $probe_out >/dev/null; then
    op_cctype=clang
  elif grep "tcc version" $probe_out >/dev/null; then
    op_cctype=tinyc
  elif grep -i "Sun C" $probe_out >/dev/null; then
    op_cctype=sunpro
  elif grep -i "IBM XL C" $probe_out >/dev/null; then
    op_cctype=xlc
  elif grep -i "MIPSpro Compilers" $probe_out >/dev/null; then
    op_cctype=mipspro
  elif grep -i microsoft $probe_out >/dev/null; then
    op_cctype=msc
  elif grep -i "PGI Compilers and Tools" $probe_out >/dev/null; then
    op_cctype=pgi
  elif grep "SDCC" $probe_out >/dev/null; then
    op_cctype=sdcc
  else
    op_cctype=cc
  fi
  rm -f $probe_out
}

make_depend() {
  work_dir=/tmp/cfront$$
  (mkdir $work_dir) 2>/dev/null
  rm -f $work_dir/*
  tmp_file1=dep$$.t
  tmp_file2=dep$$.t2

  for file in $op_src; do
    cd $orig_dir
    if test ! -f $file; then
      echo "$script_name: error: file not found $file"
      exit 1
    fi
    cp $file $work_dir
    cd $work_dir

    base_name=`basename "$file" | sed 's/\.[^.]*$//'`
    if test -n "$out_obj"; then
      object=$out_obj
    elif test -n "$op_out_dir"; then
      object="$op_out_dir/${base_name}.$obj_ext"
    else
      object="${base_name}.$obj_ext"
    fi

    if test "$op_cctype" = ticc; then
      src_pp="${base_name}.pp"
      rm -f $src_pp
      $op_cmd $cpp_flag $op_cflags $file 2>/dev/null
      if test -f $src_pp; then
        cat $src_pp | sed -n 's!^# *[0-9][0-9]* *"\([^<][^"]*\)".*!\1!p' | sort | uniq >$tmp_file1
      fi
      echo "" >>$tmp_file1
    else
      $op_cmd $cpp_flag $op_cflags $file | sed -n 's!^# *[0-9][0-9]* *"\([^<][^"]*\)".*!\1!p' | sort | uniq >$tmp_file1
    fi

    cat $tmp_file1 | sed "s/^/$object: /" >>$tmp_file2
    cat $tmp_file1 | sed 's/ *$/:/' >>$tmp_file2
  done

  cat $tmp_file2 | sort | uniq
  cd $orig_dir
  rm -rf $work_dir
}

if test $# -eq 0; then
  echo "$script_name: error: no parameters specified" >&2
  exit 1
fi

first_param=1
op_cmd=
op_cctype=
op_src=
op_cflags=
op_ldflags=
op_compile=
op_ofile=
op_pic=
op_lib=
op_lib_name=
op_lib_ver=
op_out_dir=
op_print=
op_mk=
op_mkdep=
src_multi=
while test $# -gt 0; do
  case "$1" in
    -h|-help|--help)
      print_help
      exit 0
      ;;
    -htypes)
      print_help_types
      exit 0
      ;;
    -c)
      op_compile=1
      ;;
    -o)
      shift
      op_ofile=$1
      ;;
    -pic)
      op_pic=1
      ;;
    -lib)
      op_lib=1
      ;;
    -lib=*)
      op_lib_name=`echo "$1" | sed 's/^[^=]*=//'`
      ;;
    -ver=*)
      op_lib_ver=`echo "$1" | sed 's/^[^=]*=//'`
      ;;
    -d=*)
      op_out_dir=`echo "$1" | sed 's/^[^=]*=//' | sed 's#/*$##'`
      ;;
    -print)
      op_print=1
      ;;
    -mk)
      op_mk=1
      ;;
    -mkdep)
      op_mkdep=1
      ;;
    -v)
      print_version
      exit 0
      ;;
    *.c)
      test -n "$op_src" && src_multi=1
      op_src="$op_src $1"
      ;;
    *.C|*.[Cc][Cc]|*.[Cc][Pp][Pp]|*.[Cc][Xx][Xx]|*.[Cc]++)
      test -n "$op_src" && src_multi=1
      op_src="$op_src $1"
      lang_mode=c++
      ;;
    *.h)
      test -n "$op_src" && src_multi=1
      op_src="$op_src $1"
      ;;
    *.H|*.[Hh]++|*.[Hh][Hh]|*.[Hh][Xx][Xx]|*.[Hh][Pp][Pp])
      test -n "$op_src" && src_multi=1
      op_src="$op_src $1"
      lang_mode=c++
      ;;
    *.[oO]|*.[oO][bB][jJ])
      op_obj="$op_obj $1"
      ;;
    -l*)
      op_ldflags="$op_ldflags $1"
      ;;
    lib*|*.so|*.so.*|*.a)
      op_ldflags="$op_ldflags $1"
      ;;
    -[IDU]*)
      op_cflags="$op_cflags $1"
      ;;
    -L*)
      op_ldflags="$op_ldflags $1"
      ;;
    -*)
      op_cflags="$op_cflags $1"
      op_ldflags="$op_ldflags $1"
      ;;
    *)
      if test x$first_param = x1; then
        case "$1" in
          *=*)
            op_cctype=`echo "$1" | sed 's/=.*//'`
            op_cmd=`echo "$1" | sed 's/^[^=]*=//' | sed "s#^\(\.\.*\)/#$orig_dir/\1/#"`
            if test -n "$op_cctype"; then
              case "$op_cctype" in
                cc|armc|clang|compcert|gcc|hpacc|hpansic|intel|mipspro|msc|pgi|sdcc|sunpro|ticc|tinyc|watcom|xlc)
                  : ;;
                *)
                  echo "$script_name: invalid compiler type $op_cctype" >&2
                  exit 1
                  ;;
              esac
            fi
            ;;
          *)
            op_cmd=`echo "$1" | sed "s#^\(\.\.*\)/#$orig_dir/\1/#"`
            ;;
        esac
      else
        printf "%s\n" "$script_name: invalid parameter $1" >&2
        exit 1
      fi
      ;;
  esac
  shift
  first_param=
done

if test -n "$op_ofile" && test x$op_compile = x1; then
  if test x$src_multi = x1; then
    echo "$script_name: error: cannot specify -o with -c with multiple files" >&2
    exit 1
  fi
  out_obj=$op_ofile
fi

if test -z "$op_cmd"; then
  if test $lang_mode = "c++"; then
    op_cmd="g++"
  else
    op_cmd=gcc
  fi
fi

if test -z "$op_cctype"; then
  probe_cc
else
  check_cc_found=
  ($op_cmd >/dev/null) 2>/dev/null
  if test $? -ge 126; then
    return
  fi
  check_cc_found=1
fi

cpp_flag=-E
c_flag="-c"
o_obj_flag="-o"
o_exe_flag="-o"
exe_ext=
obj_ext="o"
case "$op_cctype" in
  mingw)
    exe_ext=".exe"
    obj_ext="obj"
    ;;
  ticc)
    cpp_flag=-ppl
    ;;
  msc)
    cpp_flag="/E"
    c_flag="/c"
    o_obj_flag="/Fo:"
    o_exe_flag="/Fe:"
    exe_ext=".exe"
    obj_ext="obj"
    ;;
esac

if test x$op_mkdep = x1; then
  if test -z "$op_src"; then
    echo "$script_name: no source files specified" >&2
    exit 1
  fi

  if test x$check_cc_found = x; then
    echo "$script_name: compiler not found: $op_cmd" >&2
    exit 1
  fi

  make_depend

  exit 0
fi

if test -n "$op_src"; then
  for src in $op_src; do
    if test x$op_print = x1; then
      echo "$op_cmd $op_cflags $src"
    elif test x$op_mk = x1; then
      base_name=`basename "$file" | sed 's/\.[^.]*$//'`
      if test -n "$out_obj"; then
        object=$out_obj
      elif test -n "$op_out_dir"; then
        object="$op_out_dir/${base_name}.$obj_ext"
      else
        object="${base_name}.$obj_ext"
      fi

      op_obj="$op_obj $object"
      cat <<EOF
$object: $src
	$op_cmd $op_cflags $src
EOF
    else
      $op_cmd $op_cflags $src
    fi
  done
fi







# --------------------------------------------------------

#case "$1" in
#  gcc)
#    op_type=gcc
#    cc_cmd=gcc
#    obj_ext=o
#    exe_ext=
#    def_exe_out="a.out"
#    ;;
#  clang)
#    op_type=clang
#    cc_cmd=clang
#    obj_ext=o
#    exe_ext=
#    def_exe_out="a.out"
#    ;;
#  mingw)
#    op_type=mingw
#    cc_cmd=mingw
#    obj_ext=obj
#    exe_ext=".exe"
#    def_exe_out="a.out.exe"
#    ;;
#  xlc)
#    op_type=xlc
#    cc_cmd=xlc
#    obj_ext=o
#    exe_ext=
#    def_exe_out="a.out"
#    ;;
#  *)
#    echo "$script_name: error: invalid compiler type $1" >&2
#    exit 1
#    ;;
#esac
#shift
#
#
#
#
#if test x$op_compile = x; then
#  if test -z "$op_obj" && test -z "$cc_obj"; then
#    echo "$script_name: error: no input files" >&2
#    exit 1
#  fi
#
#  if test x$op_print = x1; then
#    echo "$cc_cmd $ldflags $op_obj $cc_obj"
#  elif test x$op_mk = x1; then
#    if test -z "$op_outfile"; then
#      outfile=$def_exe_out
#      ldflags="$ldflags -o $outfile"
#    fi
#    cat <<EOF
#$outfile: $op_obj $cc_obj
#	$cc_cmd $ldflags $op_obj $cc_obj
#EOF
#  else
#    $cc_cmd $ldflags $op_obj $cc_obj
#  fi
#fi

